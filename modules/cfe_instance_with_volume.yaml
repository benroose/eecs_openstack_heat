heat_template_version: newton

description: Template to create an instance. Initial startup installs and bootstraps to cfengine policyhub.

## DEFINE PARAMS OR PULL IN FROM UPSTREAM TEMPLATE
parameters:
## VIRTUAL MACHINE
  name:
    type: string
    label: Instance name
    description: Name of server instance created.
    default: cfe-instance
  cluster_type:
    type: string
    label: cluster access type
    description: Access type for entire cluster.
    default: test
  metadata:
    type: json
    label: json format metadata
    description: metadata pushed into the instance.
    default: []
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use a Debian based image.
    default: debian-server-9-cloudimg
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: testing

## VOLUME BLOCK DEVICE
  volume_id:
    type: string
    label: Volume_ID
    description: ID of existing cinder volume to use as mapped device
    default: none
  boot_index:
    type: number
    label: Boot_Index
    description: Boot order index for instance
    default: 0
  block_device_name:
    type: string
    label: Device_Name
    description: Name of device located in /dev/ on instance root directory (depreciated)
    default: vda
  delete_on_termination:
    type: boolean
    label: Delete_dev_on_term
    description: Delete volume on termination of instance
    default: false

## METADATA
  ballastd_ip:
    type: string
    label: ballast server ip address
    description: IP address of ballast server host in the cluster pushed from upstream template.
    default: no_ballast

## NETWORK
  private_net:
    type: string
    label: Private network name or ID
    description: Network to attach server to.
    default: private
  private_subnet:
    type: string
    label: Private subnet name or ID
    description: Subnet to attach server to.
    default: private-sub
  security_groups:
    type: comma_delimited_list
    label: Security Group names or IDs
    description: list of security groups to association with port.
  ip_address:
    type: string
    label: Defined IP Address
    description: user defined fixed ip address to association with port.
    default: dynamic_ip

  # cluster_ips:
  #   type: comma_delimited_list
  #   label: cluster ip addresses
  #   description: Comma separated list of IP addresses in the cluster pushed from upstream template.
  #   default: no_metadata
  # gateway_ip:
  #   type: string
  #   label: gateway server ip address
  #   description: IP address of web gateway host in the cluster pushed from upstream template.
  #   default: no_metadata
  # bastion_ip:
  #   type: string
  #   label: bastion server ip address
  #   description: IP address of ssh bastion host in the cluster pushed from upstream template.
  #   default: no_metadata

## WAIT CONDITIONS
  wc_timeout:
    type: number
    description: Timeout for WaitCondition, depends on your image and environment
    default: 1000
  wc_count:
    type: number
    description: Count of total WaitCondition events
    default: 3

## INSTALLER SCRIPT ENVIRONMENT VARS
  policyhub:
    type: string
    description: IP address of CFEngine policyhub, defaults to policyhub-dev.
    default: 156.26.10.17

conditions:
  use_dynamic_ip: { equals: [{get_param: ip_address}, 'dynamic_ip'] }

  # use_fixed_ip:
  #   not:
  #     equals:
  #       - get_param: fixed_ip
  #       - dynamic_ip

resources: 

## DEFINE WAIT CONDITIONS
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: { get_param: wc_count }
      timeout: { get_param: wc_timeout }

  wait_handle:
    type: OS::Heat::WaitConditionHandle

## DEFINE NETWORK PORTS AND LINK TO SECURITY GROUPS
  dynamic_ip_port:
    condition: use_dynamic_ip
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups: { get_param: security_groups }

  fixed_ip_port:
    condition: { not: use_dynamic_ip }
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups: { get_param: security_groups }
      fixed_ips:
        - subnet: { get_param: private_subnet }
          ip_address: { get_param: ip_address }

## DEFINE VM SERVER (depending on whether to use a dynamic or fixed ip address)
  base_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      # image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      block_device_mapping_v2:
        - volume_id: { get_param: volume_id }
        # - image: { get_param: image }
          boot_index: { get_param: boot_index }
          # device_name: { get_param: block_device_name }
          delete_on_termination: { get_param: delete_on_termination }
      networks:
        - port: { if: ["use_dynamic_ip", {get_resource: dynamic_ip_port}, {get_resource: fixed_ip_port}] }
      metadata: { get_param: metadata }
        # cluster_name: { get_param: 'OS::stack_name' }
        # cluster_type: { get_param: cluster_type }
        # ballastd_ip: { get_param: ballastd_ip }
      user_data_format: RAW
      user_data: 
        str_replace:
          template: { get_file: cfengine_installer.sh }
          params:
            $POLICYHUB_IP: { get_param: policyhub }
            $wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

## DEFINE OUTPUTS TO UPSTREAM TEMPLATE
outputs:
  name:
    description: Name of the instance.
    value: { get_attr: [base_server, name] }
  ip:
    description: The IP address of the instance.
    value: { get_attr: [base_server, first_address] }
  port:
    description: The network port of the instance.
    value: { if: [use_dynamic_ip, {get_resource: dynamic_ip_port}, {get_resource: fixed_ip_port}] }
  wc_data:
    description: data values returned from wait_condition.
    value: { get_attr: ['wait_condition', 'data'] }
