heat_template_version: newton

description: Template to create a simple instance.

## DEFINE PARAMS OR PULL IN FROM UPSTREAM TEMPLATE
parameters:
## VIRTUAL MACHINE
  name:
    type: string
    label: Instance name
    description: Name of server instance created.
    default: testing-instance
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use a Debian based image.
    default: debian_server-9-cloudimg
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: test.pem
  metadata:
    type: json
    label: Metadata
    description: List of key:value pairs to associate with the compute instance.
    default: {}

## NETWORK
  private_net:
    type: string
    label: Private network name or ID
    description: Network to attach server to.
    default: private
  private_subnet:
    type: string
    label: Private subnet name or ID
    description: Subnet to attach server to.
    default: private
  security_groups:
    type: comma_delimited_list
    label: Security Group names or IDs
    description: list of security groups to association with port.
  ip_address:
    type: string
    label: Defined IP Address
    description: user defined fixed ip address to association with port.
    default: dynamic_ip

 # WAIT CONDITIONS
  # wc_timeout:
  #   type: number
  #   description: Timeout for WaitCondition, depends on your image and environment
  #   default: 1000
  # wc_count:
  #   type: number
  #   description: Count of total WaitCondition events
  #   default: 3

## INSTALLER SCRIPT ENVIRONMENT VARS
# NONE

conditions:
  use_dynamic_ip: { equals: [{get_param: ip_address}, 'dynamic_ip'] }

resources: 

## DEFINE WAIT CONDITIONS
  # wait_condition:
  #   type: OS::Heat::WaitCondition
  #   properties:
  #     handle: { get_resource: wait_handle }
  #     count: { get_param: wc_count }
  #     timeout: { get_param: wc_timeout }

  # wait_handle:
  #   type: OS::Heat::WaitConditionHandle

## DEFINE NETWORK PORTS AND LINK TO SECURITY GROUPS
  dynamic_ip_port:
    condition: use_dynamic_ip
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups: { get_param: security_groups }

  fixed_ip_port:
    condition: { not: use_dynamic_ip }
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups: { get_param: security_groups }
      fixed_ips:
        - subnet: { get_param: private_subnet }
          ip_address: { get_param: ip_address }

## DEFINE VM SERVER
  base_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { if: ["use_dynamic_ip", {get_resource: dynamic_ip_port}, {get_resource: fixed_ip_port}] }
      metadata: { get_param: metadata }
        # cluster_name: { get_param: 'OS::stack_name' }
      # user_data_format: RAW
      # user_data: 
      #   str_replace:
      #      params:
      #       $wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

## DEFINE OUTPUTS TO UPSTREAM TEMPLATE
outputs:
  name:
    description: Name of the instance.
    value: { get_attr: [base_server, name] }
  ip:
    description: The IP address of the instance.
    value: { get_attr: [base_server, first_address] }
  port:
    description: The network port of the instance.
    value: { if: [use_dynamic_ip, {get_resource: dynamic_ip_port}, {get_resource: fixed_ip_port}] }
  # wc_data:
  #   description: data values returned from wait_condition.
  #   value: { get_attr: ['wait_condition', 'data'] }
