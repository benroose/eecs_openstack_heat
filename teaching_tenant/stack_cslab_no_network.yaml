heat_template_version: newton
 
description: Template for setting up private network and install cluster with Guacamole gateway and ssh bastion

parameters:
## CLUSTER EXTERNAL ACCESS TYPE
  cluster_type:
    type: string
    label: cluster type
    description: type of cluster to build.
    default: full_cluster
    constraints:
      - allowed_values: [full_cluster, ssh_only, web_only]
  cluster_access:
    type: string
    label: cluster network access
    description: network access into cluster via bastion or gateway.
    default: wsu_only
    constraints:
      - allowed_values: [external_access, wsu_only, datacenter_only, prinet_only]

## GLOBAL PARAMS
  image:
    type: string
    label: Image name or ID
    description: Image to be used for all nodes. Please use a Debian based image.
    default: debian-server-9-cloudimg
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on all nodes.
    default: testing
  cluster_size:
    type: number
    label: Cluster size
    description: Number of node instances in cluster.
    default: 16

## NETWORK PARAMS
  public_net:
    type: string
    label: Public network name or ID
    description: Public network to attach cluster.
    default: WSU_Public_971
  private_net_name:
    type: string
    description: Private network name
    default: csnetwork
  private_net_cidr:
    type: string
    label: CIDR
    description: Classless Inter-Domain Routing (CIDR) of the private network.
    default: '10.10.10.0/24'
  private_net_gateway:
    type: string
    description: Private network gateway address
    default: '10.10.10.1'

## INSTANCE SPECIFIC PARAMS 
  node_name:
    type: string
    label: Cluster Node Names
    description: Hostnames of clustered node servers. Use _%index% for unigue numbering.
    default: cslab-node-%index%
  node_flavor:
    type: string
    label: Node Flavor
    description: Type of instance (flavor) to be used for each cluster backend node.
    default: m1.large.w.swap
  gateway_name:
    type: string
    label: Gateway Name
    description: Hostname of gateway created.
    default: cslab-gateway
  gateway_flavor:
    type: string
    label: Gateway Flavor
    description: Type of instance (flavor) to be used for the gateway.
    default: m1.large
  gateway_volume_id:
    type: string
    label: Gateway Volume_ID
    description: ID of existing cinder volume to use as mapped device for gateway.
    default: 
  gateway_fixed_ip:
    type: string
    label: Web Gateway IP
    description: Fixed IP address to be used for the web gateway.
    default: 10.10.10.100
  bastion_name:
    type: string
    label: Bastion Name
    description: Hostname of ballast SSH bastion created.
    default: cslab-bastion
  bastion_flavor:
    type: string
    label: Bastion Flavor
    description: Type of instance (flavor) to be used for the SSH bastion.
    default: m1.large
  bastion_volume_id:
    type: string
    label: Bastion Volume_ID
    description: ID of existing cinder volume to use as mapped device for bastion.
    default: 
  bastion_fixed_ip:
    type: string
    label: Bastion IP
    description: Fixed IP address to be used for the SSH bastion.
    default: 10.10.10.110
  ballastd_ip:
    type: string
    label: Ballast Server IP
    description: Defined IP address for ballast server in cluster to be sent as metadata to all hosts.
    default: 10.10.10.100

## NOTE: there seems to be a metadata limitation for comma_delimited_list variables, which allows for a max list of 17 ip addresses. Moving cluster ip list to ballast host data collection

conditions:
  enable_ssh_bastion:
    or:
      - equals:
        - get_param: cluster_type
        - full_cluster
      - equals:
        - get_param: cluster_type
        - ssh_only

  enable_web_gateway:
    or:
      - equals:
        - get_param: cluster_type
        - full_cluster
      - equals:
        - get_param: cluster_type
        - web_only

resources:
## GENERATE PRIVATE NETWORK
  # network:
  #   type: Mod::EECS::PrivateNet
  #   properties:
  #     public_net: { get_param: public_net }
  #     private_net_cidr: { get_param: private_net_cidr }
  #     private_net_gateway: { get_param: private_net_gateway }

## GENERATE SECURITY GROUPS
  security_groups:
    type: Mod::EECS::SecurityGroups
    properties:
      cluster_access: { get_param: cluster_access }
      private_subnet_cidr: { get_param: private_net_cidr }
      # private_subnet_cidr: { get_attr: [network, cidr] }

##  GENERATE BACKEND CLUSTER RESOURCE GROUP FOR RDP ACCESS
  cluster_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: cluster_size }
      resource_def:
        type: Mod::EECS::CFEInstance
        # type: Mod::EECS::SimpleInstance
        properties:
          name: { get_param: node_name }
          # NOT USED name: { str_replace: { params: { __name_prefix__: { get_param: "OS::stack_name" } }, template: __name_prefix__-node-%index% } }
          cluster_type: {get_param: cluster_type}
          flavor: { get_param: node_flavor }
          image: { get_param: image }
          key: { get_param: key }
          private_net: { get_param: private_net_name }
          ballastd_ip: {if: ["enable_web_gateway", {get_param: gateway_fixed_ip}, {get_param: bastion_fixed_ip}]}
          # ballastd_ip: { get_param: ballastd_ip }
          security_groups:
           - { get_attr: [ security_groups, sg_ingress_ssh_prinet ] }
           - { get_attr: [ security_groups, sg_ingress_rdp_prinet ] }
  
## GENERATE SINGLE INSTANCE BALLAST BASTION/JUMP-HOST WITH FIXED_IP
## NOTE: using a generic VMInstance with ssh security groups and CFE bootstrapping
## hostname is the only defining element for CFE to configure this node as a ballast bastion
  ssh_bastion:
    condition: enable_ssh_bastion
    # depends_on: cluster_nodes
    type: Mod::EECS::CFEInstanceWithVol
    # type: Mod::EECS::CFEInstance
    # type: Mod::EECS::SimpleInstance
    properties:
      name: { get_param: bastion_name }
      cluster_type: {get_param: cluster_type}
      flavor: { get_param: bastion_flavor }
      image: { get_param: image }
      key: { get_param: key }
      volume_id: { get_param: bastion_volume_id }
      private_net: { get_param: private_net_name }
      private_subnet: { str_replace: { params: { __name_prefix__: { get_param: private_net_name } }, template: __name_prefix__-sub } }
      ip_address: { get_param: bastion_fixed_ip }
      ballastd_ip: {if: ["enable_web_gateway", {get_param: gateway_fixed_ip}, {get_param: bastion_fixed_ip}]}
      security_groups:
        - { get_attr: [ security_groups, sg_ingress_ping ] }
        - { get_attr: [ security_groups, sg_ingress_ssh ] }
        - { get_attr: [ security_groups, sg_ingress_ballast_prinet ] }

  ssh_floating_ip:
    condition: enable_ssh_bastion
    depends_on: ssh_bastion
    type: Mod::EECS::FloatingIp
    properties:
      port: { get_attr: [ssh_bastion, port] }
      fixed_private_ip: { get_param: bastion_fixed_ip }
      public_net: { get_param: public_net }

## GENERATE SINGLE INSTANCE GUACAMOLE GATEWAY
## using a generic VMInstance with ssh/web security groups and CFE bootstrapping
## hostname is the only defining element for CFE to configure this node as a guacamole gateway
  web_gateway:
    condition: enable_web_gateway
    # depends_on: cluster_nodes
    type: Mod::EECS::CFEInstanceWithVol
    # type: Mod::EECS::SimpleInstance
    properties:
      name: { get_param: gateway_name }
      cluster_type: {get_param: cluster_type}
      flavor: { get_param: gateway_flavor }
      image: { get_param: image }
      volume_id: { get_param: gateway_volume_id }
      key: { get_param: key }
      private_net: { get_param: private_net_name }
      private_subnet: { str_replace: { params: { __name_prefix__: { get_param: private_net_name } }, template: __name_prefix__-sub } }
      # private_subnet: { get_attr: [network, subnet_name] }
      # cluster_ips: { get_attr: [cluster_nodes, ip] } # ballast has taken over monitoring cluster host ips
      ip_address: { get_param: gateway_fixed_ip }
      ballastd_ip: { get_param: gateway_fixed_ip }
      security_groups:
        - { get_attr: [ security_groups, sg_ingress_ssh_prinet ] }
        - { get_attr: [ security_groups, sg_ingress_ballast_prinet ] }
        - { get_attr: [ security_groups, sg_ingress_web ] }

  web_floating_ip:
    condition: enable_web_gateway
    depends_on: web_gateway
    type: Mod::EECS::FloatingIp
    properties:
      port: { get_attr: [web_gateway, port] }
      fixed_private_ip: { get_param: gateway_fixed_ip }
      public_net: { get_param: public_net }

outputs:
  ssh_bastion_ip:
    description: The public IP address to access bastion into cluster.
    value: { get_attr: [ssh_floating_ip, ip] }
    condition: enable_ssh_bastion
  ssh_bastion_data:
    description: data values returned from bastion wait_condition.
    value: { get_attr: ['ssh_bastion', 'wc_data'] }
    condition: enable_ssh_bastion
  web_gateway_ip:
    description: The public IP address to access gateway into cluster.
    value: { get_attr: [web_floating_ip, ip] }
    condition: enable_web_gateway
  web_gateway_data:
    description: data values returned from gateway wait_condition.
    value: { get_attr: ['web_gateway', 'wc_data'] }
    condition: enable_web_gateway
  ballastd_ip:
    description: The public IP address for the ballast server within cluster.
    value: { get_param: ballastd_ip }
